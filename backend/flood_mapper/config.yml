# -----------------------------------------------------------------------------
# Configuration for Flood Mapper v3
# -----------------------------------------------------------------------------

# File paths for input data and output directory
paths:
  boundary: 'data/boundary.shp'
  dem: 'data/dem.tif'
  lulc: 'data/lulc_clipped.tif'
  rivers: 'data/rivers.shp'
  waterbodies: 'data/waterbodies_punjab.shp'
  rain_forecast: 'C:\Users\jayja\Desktop\flood_dashboard\backend\csv_generator\flood_prediction.csv'
  output_dir: 'output/'

# General project parameters
parameters:
  # Target Coordinate Reference System (CRS) for all processing.
  # All input data will be reprojected to this CRS.
  # Example: "EPSG:32643" for WGS 84 / UTM zone 43N
  target_crs: "EPSG:32643"
  
  # Buffer distance in kilometers to apply around the boundary for river selection.
  river_buffer_km: 2.0
  
  # Minimum area in hectares for a water body to be considered a significant reservoir.
  reservoir_min_ha: 0.1

# Thresholds for the "safe-check" fast path.
# If all conditions are met, the full analysis is skipped.
safe_check_thresholds:
  # Max cumulative rainfall (mm) in the 15 days prior to today.
  R0_recent_mm: 50.0
  # Max cumulative rainfall (mm) forecast for the next 5 days.
  R0_forecast_mm: 30.0
  # Max average smoothed flood probability over the analysis window.
  P0_prob: 0.15

# Weights for combining vulnerability components. Must sum to 1.0.
vulnerability_weights:
  elevation: 0.30
  slope: 0.20
  lulc: 0.25
  distance_to_water: 0.15
  drainage_density: 0.10

# Mapping of Land Use/Land Cover (LULC) raster values to vulnerability coefficients (0-1).
# Higher values mean higher vulnerability.
# Example: 10=Urban, 20=Forest, 30=Water, 40=Barren
lulc_coefficients:
  10: 0.9  # Urban/Impervious
  20: 0.2  # Forest
  30: 1.0  # Water Body (will be masked by distance calc, but good practice)
  40: 0.6  # Barren Land
  default: 0.4 # Generic value for unlisted classes

# Weights for combining threat components. Must sum to 1.0.
threat_weights:
  # Recent rainfall (past)
  rain_3d_sum: 0.25
  rain_7d_sum: 0.25
  # Forecast rainfall (future)
  forecast_5d_sum: 0.30
  # Model-predicted probability
  flood_prob: 0.20

# Normalization values for threat components.
# These should represent a high-end event for the study area, like the 95th percentile
# of historical data for that metric. For example, if the 95th percentile of 3-day
# rainfall sums is 120mm, set rain_3d_sum_p95 to 120.0.
threat_normalization:
  rain_3d_sum_p95: 100.0 # (mm)
  rain_7d_sum_p95: 200.0 # (mm)
  forecast_5d_sum_p95: 150.0 # (mm)

# Parameters for combining vulnerability and threat
combination_params:
  # Alpha controls the influence of the threat score on the final composite risk.
  # Higher alpha means threat has a larger impact.
  alpha: 2.0
  
  # Multiplier applied to the threat score if any `Flood_Pred_Smoothed` is True in the forecast.
  flood_pred_multiplier: 1.5
  
  # Threat score threshold above which the reservoir overflow heuristic is triggered.
  reservoir_threat_threshold: 0.6
  
  # Factor for non-linear slope vulnerability. Higher value = faster drop-off.
  slope_decay_factor: 0.1
  
  # Vulnerability multiplier for areas downstream of reservoirs during high threat.
  reservoir_downstream_multiplier: 2.0

# Configuration for the final classified output
output_classes:
  count: 5
  labels:
    - "Very Low Risk"
    - "Low Risk"
    - "Moderate Risk"
    - "High Risk"
    - "Very High Risk"
  # Matplotlib colormap name (e.g., "YlOrRd") OR a list of custom hex color codes.
  # The number of colors in the list must be equal to or greater than 'count'.
  # Example (Green -> Yellow -> Red):
  colormap: ["#004d01", "#00ff04", "#ffc400", "#ff8c00", "#c40000"]
  # Classes to vectorize into the output GeoJSON (1-based index).
  # Here, we vectorize "High Risk" (4) and "Very High Risk" (5).
  classes_to_vectorize: [4, 5]

  # Absolute thresholds for classifying the composite risk score (0-1).
  # The number of values must be one less than the class 'count'.
  # Example for 5 classes: [Very Low, Low, Moderate, High, Very High]
  # Bins: (0-0.2], (0.2-0.4], (0.4-0.6], (0.6-0.8], (0.8-1.0]
  classification_breaks: [0.2, 0.4, 0.6, 0.8]